{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar Cell = /*#__PURE__*/ function() {\n    function Cell(cellEl, cellClass, x, y) {\n        _class_call_check(this, Cell);\n        this.$el = cellEl;\n        this.x = x;\n        this.y = y;\n        this.cellClass = cellClass;\n        this.value = null;\n        this.mergeValue = null;\n    }\n    _create_class(Cell, [\n        {\n            key: \"setValue\",\n            value: function setValue(value) {\n                var mergeValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n                this.value = value;\n                this.mergeValue = mergeValue;\n                this.$el.innerText = this.value;\n                this.$el.className = this.cellClass;\n                if (this.value !== null) this.$el.classList.add(\"\".concat(this.cellClass, \"--\").concat(this.value));\n            }\n        },\n        {\n            key: \"canMerge\",\n            value: function canMerge(newCell) {\n                return !this.value || !this.mergeValue && this.value === newCell.value;\n            }\n        }\n    ]);\n    return Cell;\n}();\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        _class_call_check(this, Game);\n        this.messageClass = \"message\";\n        this.messageHiddenClass = \"hidden\";\n        this.cellClass = \"field-cell\";\n        this.state = \"start\";\n        this.cells = [];\n        this.$score = document.querySelector(\".game-score\");\n        this.$toggleBtn = document.querySelector(\".button\");\n        this.$messages = document.querySelectorAll(\".\".concat(this.messageClass));\n        this.$rows = document.querySelectorAll(\".field-row\");\n    }\n    _create_class(Game, [\n        {\n            key: \"init\",\n            value: function init() {\n                this.initCells();\n                this.initEvents();\n            }\n        },\n        {\n            key: \"initCells\",\n            value: function initCells() {\n                var _this = this;\n                this.$rows.forEach(function(row, rowIndex) {\n                    var rowCells = row.querySelectorAll(\".\".concat(_this.cellClass));\n                    rowCells.forEach(function(cell, cellIndex) {\n                        _this.cells.push(new Cell(cell, _this.cellClass, cellIndex, rowIndex));\n                    });\n                });\n            }\n        },\n        {\n            key: \"initEvents\",\n            value: function initEvents() {\n                var _this = this;\n                this.$toggleBtn.addEventListener(\"click\", function(e) {\n                    e.preventDefault();\n                    _this.restart();\n                });\n                document.addEventListener(\"keydown\", this.handleKeyInput.bind(this));\n            }\n        },\n        {\n            key: \"groupCellsByColumn\",\n            value: function groupCellsByColumn() {\n                return this.cells.reduce(function(group, cell) {\n                    group[cell.x] = group[cell.x] || [];\n                    group[cell.x][cell.y] = cell;\n                    return group;\n                }, []);\n            }\n        },\n        {\n            key: \"groupCellsByRow\",\n            value: function groupCellsByRow() {\n                return this.cells.reduce(function(group, cell) {\n                    group[cell.y] = group[cell.y] || [];\n                    group[cell.y][cell.x] = cell;\n                    return group;\n                }, []);\n            }\n        },\n        {\n            key: \"getRandomEmptyCell\",\n            value: function getRandomEmptyCell() {\n                var emptyCells = this.cells.filter(function(cell) {\n                    return !cell.value;\n                });\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                return emptyCells[randomIndex];\n            }\n        },\n        {\n            key: \"changeState\",\n            value: function changeState() {\n                var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n                var _this = this;\n                this.state = state;\n                this.$messages.forEach(function(message) {\n                    if (message.classList.contains(\"\".concat(_this.messageClass, \"-\").concat(_this.state))) message.classList.remove(_this.messageHiddenClass);\n                    else message.classList.add(_this.messageHiddenClass);\n                });\n                if (this.state !== \"start\") {\n                    this.$toggleBtn.classList.remove(\"start\");\n                    this.$toggleBtn.classList.add(\"restart\");\n                    this.$toggleBtn.innerText = \"Restart\";\n                }\n            }\n        },\n        {\n            key: \"changeScore\",\n            value: function changeScore() {\n                var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n                var current = Number(this.$score.innerText);\n                this.$score.innerText = value ? current + value : 0;\n            }\n        },\n        {\n            key: \"clearGrid\",\n            value: function clearGrid() {\n                this.cells.forEach(function(cell) {\n                    return cell.setValue(null);\n                });\n                this.changeScore();\n            }\n        },\n        {\n            key: \"canMoveGroup\",\n            value: function canMoveGroup(groupCells) {\n                return groupCells.some(function(group) {\n                    return group.some(function(cell, index) {\n                        if (index === 0) return false;\n                        if (!cell.value) return false;\n                        var targetCell = group[index - 1];\n                        return targetCell.canMerge(cell);\n                    });\n                });\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                return [\n                    this.groupCellsByColumn(),\n                    this.groupCellsByColumn().map(function(col) {\n                        return col.reverse();\n                    }),\n                    this.groupCellsByRow(),\n                    this.groupCellsByRow().map(function(col) {\n                        return col.reverse();\n                    })\n                ].some(this.canMoveGroup);\n            }\n        },\n        {\n            key: \"mergeCells\",\n            value: function mergeCells() {\n                var _this = this;\n                this.cells.forEach(function(cell) {\n                    if (cell.mergeValue) {\n                        var newValue = cell.value + cell.mergeValue;\n                        cell.setValue(newValue);\n                        cell.mergeValue = null;\n                        _this.changeScore(newValue);\n                        if (newValue >= 2048) _this.changeState(\"win\");\n                    }\n                });\n            }\n        },\n        {\n            key: \"moveCells\",\n            value: function moveCells(groupCells) {\n                if (this.state === \"start\") return this.restart();\n                else if ([\n                    \"win\",\n                    \"lose\"\n                ].includes(this.state)) return;\n                if (!this.canMoveGroup(groupCells)) return;\n                groupCells.forEach(function(group) {\n                    for(var i = 1; i < group.length; i++){\n                        if (!group[i].value) continue;\n                        var cellWithValue = group[i];\n                        var targetCell = void 0;\n                        var j = i - 1;\n                        while(j >= 0 && group[j].canMerge(cellWithValue)){\n                            targetCell = group[j];\n                            j--;\n                        }\n                        if (!targetCell) continue;\n                        targetCell.setValue(cellWithValue.value, targetCell.value);\n                        cellWithValue.setValue(null);\n                    }\n                });\n                this.mergeCells();\n                this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n                if (!this.canMove()) this.changeState(\"lose\");\n            }\n        },\n        {\n            key: \"handleKeyInput\",\n            value: function handleKeyInput(e) {\n                switch(e.key){\n                    case \"ArrowUp\":\n                        this.moveCells(this.groupCellsByColumn());\n                        break;\n                    case \"ArrowDown\":\n                        this.moveCells(this.groupCellsByColumn().map(function(col) {\n                            return col.reverse();\n                        }));\n                        break;\n                    case \"ArrowLeft\":\n                        this.moveCells(this.groupCellsByRow());\n                        break;\n                    case \"ArrowRight\":\n                        this.moveCells(this.groupCellsByRow().map(function(col) {\n                            return col.reverse();\n                        }));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.clearGrid();\n                this.changeState();\n                this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n                this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n            }\n        }\n    ]);\n    return Game;\n}();\nvar game = new Game();\ngame.init();\n\n//# sourceMappingURL=index.0c3fe8f2.js.map\n","\"use strict\";\n\nclass Cell {\n  constructor(cellEl, cellClass, x, y) {\n    this.$el = cellEl;\n\n    this.x = x;\n    this.y = y;\n    this.cellClass = cellClass;\n    this.value = null;\n    this.mergeValue = null;\n  }\n\n  setValue(value, mergeValue = null) {\n    this.value = value;\n    this.mergeValue = mergeValue;\n    this.$el.innerText = this.value;\n    this.$el.className = this.cellClass;\n\n    if (this.value !== null) {\n      this.$el.classList.add(`${this.cellClass}--${this.value}`);\n    }\n  }\n\n  canMerge(newCell) {\n    return !this.value || (!this.mergeValue && this.value === newCell.value);\n  }\n}\n\nclass Game {\n  constructor() {\n    this.messageClass = \"message\";\n    this.messageHiddenClass = \"hidden\";\n    this.cellClass = \"field-cell\";\n    this.state = \"start\";\n    this.cells = [];\n\n    this.$score = document.querySelector(\".game-score\");\n    this.$toggleBtn = document.querySelector(\".button\");\n    this.$messages = document.querySelectorAll(`.${this.messageClass}`);\n    this.$rows = document.querySelectorAll(\".field-row\");\n  }\n\n  init() {\n    this.initCells();\n    this.initEvents();\n  }\n  initCells() {\n    this.$rows.forEach((row, rowIndex) => {\n      const rowCells = row.querySelectorAll(`.${this.cellClass}`);\n\n      rowCells.forEach((cell, cellIndex) => {\n        this.cells.push(new Cell(cell, this.cellClass, cellIndex, rowIndex));\n      });\n    });\n  }\n  initEvents() {\n    this.$toggleBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n\n      this.restart();\n    });\n    document.addEventListener(\"keydown\", this.handleKeyInput.bind(this));\n  }\n  groupCellsByColumn() {\n    return this.cells.reduce((group, cell) => {\n      group[cell.x] = group[cell.x] || [];\n      group[cell.x][cell.y] = cell;\n\n      return group;\n    }, []);\n  }\n  groupCellsByRow() {\n    return this.cells.reduce((group, cell) => {\n      group[cell.y] = group[cell.y] || [];\n      group[cell.y][cell.x] = cell;\n\n      return group;\n    }, []);\n  }\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => !cell.value);\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n  changeState(state = null) {\n    this.state = state;\n\n    this.$messages.forEach((message) => {\n      if (message.classList.contains(`${this.messageClass}-${this.state}`)) {\n        message.classList.remove(this.messageHiddenClass);\n      } else {\n        message.classList.add(this.messageHiddenClass);\n      }\n    });\n\n    if (this.state !== \"start\") {\n      this.$toggleBtn.classList.remove(\"start\");\n      this.$toggleBtn.classList.add(\"restart\");\n      this.$toggleBtn.innerText = \"Restart\";\n    }\n  }\n  changeScore(value = null) {\n    const current = Number(this.$score.innerText);\n\n    this.$score.innerText = value ? current + value : 0;\n  }\n  clearGrid() {\n    this.cells.forEach((cell) => cell.setValue(null));\n    this.changeScore();\n  }\n  canMoveGroup(groupCells) {\n    return groupCells.some((group) => {\n      return group.some((cell, index) => {\n        if (index === 0) {\n          return false;\n        }\n\n        if (!cell.value) {\n          return false;\n        }\n\n        const targetCell = group[index - 1];\n\n        return targetCell.canMerge(cell);\n      });\n    });\n  }\n  canMove() {\n    return [\n      this.groupCellsByColumn(),\n      this.groupCellsByColumn().map((col) => col.reverse()),\n      this.groupCellsByRow(),\n      this.groupCellsByRow().map((col) => col.reverse()),\n    ].some(this.canMoveGroup);\n  }\n  mergeCells() {\n    this.cells.forEach((cell) => {\n      if (cell.mergeValue) {\n        const newValue = cell.value + cell.mergeValue;\n\n        cell.setValue(newValue);\n        cell.mergeValue = null;\n\n        this.changeScore(newValue);\n\n        if (newValue >= 2048) {\n          this.changeState(\"win\");\n        }\n      }\n    });\n  }\n  moveCells(groupCells) {\n    if (this.state === \"start\") {\n      return this.restart();\n    } else if ([\"win\", \"lose\"].includes(this.state)) {\n      return;\n    }\n\n    if (!this.canMoveGroup(groupCells)) {\n      return;\n    }\n\n    groupCells.forEach((group) => {\n      for (let i = 1; i < group.length; i++) {\n        if (!group[i].value) {\n          continue;\n        }\n\n        const cellWithValue = group[i];\n        let targetCell;\n        let j = i - 1;\n\n        while (j >= 0 && group[j].canMerge(cellWithValue)) {\n          targetCell = group[j];\n          j--;\n        }\n\n        if (!targetCell) {\n          continue;\n        }\n\n        targetCell.setValue(cellWithValue.value, targetCell.value);\n        cellWithValue.setValue(null);\n      }\n    });\n\n    this.mergeCells();\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n\n    if (!this.canMove()) {\n      this.changeState(\"lose\");\n    }\n  }\n  handleKeyInput(e) {\n    switch (e.key) {\n      case \"ArrowUp\":\n        this.moveCells(this.groupCellsByColumn());\n        break;\n      case \"ArrowDown\":\n        this.moveCells(this.groupCellsByColumn().map((col) => col.reverse()));\n        break;\n      case \"ArrowLeft\":\n        this.moveCells(this.groupCellsByRow());\n        break;\n      case \"ArrowRight\":\n        this.moveCells(this.groupCellsByRow().map((col) => col.reverse()));\n        break;\n      default:\n        break;\n    }\n  }\n  restart() {\n    this.clearGrid();\n    this.changeState();\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n  }\n}\n\nconst game = new Game();\n\ngame.init();\n"],"names":["_class_call_check","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_create_class","protoProps","staticProps","prototype","Cell","cellEl","cellClass","x","y","$el","value","mergeValue","arguments","innerText","className","classList","add","concat","newCell","game","Game","messageClass","messageHiddenClass","state","cells","$score","document","querySelector","$toggleBtn","$messages","querySelectorAll","$rows","initCells","initEvents","_this","forEach","row","rowIndex","rowCells","cell","cellIndex","push","addEventListener","e","preventDefault","restart","handleKeyInput","bind","reduce","group","emptyCells","filter","randomIndex","Math","floor","random","message","contains","remove","current","Number","setValue","changeScore","groupCells","some","index","targetCell","canMerge","groupCellsByColumn","map","col","reverse","groupCellsByRow","canMoveGroup","newValue","changeState","includes","cellWithValue","j","mergeCells","getRandomEmptyCell","canMove","moveCells","clearGrid","init"],"version":3,"file":"index.0c3fe8f2.js.map"}